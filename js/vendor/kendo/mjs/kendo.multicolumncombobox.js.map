{"version":3,"file":"kendo.multicolumncombobox.js","names":["__meta__","id","name","category","description","depends","features","$","undefined$1","kendo","window","ui","ComboBox","percentageUnitsRegex","MultiColumnComboBox","extend","init","element","options","fn","call","this","list","parent","addClass","_allColumnsWidthsAreSet","width","_calculateDropDownWidth","dropDownWidth","ns","columns","filterFields","setOptions","length","i","currentWidth","isNaN","parseInt","test","totalWidth","support","scrollbar","_wrapper","wrapper","plugin","cssProperties","registerPrefix","registerValues","prop","values","roundedValues","concat","jQuery","kendo$1"],"sources":["kendo.multicolumncombobox.js"],"mappings":"MAAO,sBAEP,IAAIA,SAAW,CACXC,GAAI,sBACJC,KAAM,sBACNC,SAAU,MACVC,YAAa,wJACbC,QAAS,CAAE,YACXC,SAAU,CAAE,CACRL,GAAI,kBACJC,KAAM,kBACNE,YAAa,iDACbC,QAAS,CAAE,oBACZ,CACCJ,GAAI,iBACJC,KAAM,cACNE,YAAa,6BACbC,QAAS,CAAE,mBAInB,SAAUE,EAAGC,GACT,IAAIC,EAAQC,OAAOD,MACfE,EAAKF,EAAME,GACXC,EAAWD,EAAGC,SACdC,EAAuB,kBAIvBC,EAAsBF,EAASG,OAAO,CACtCC,KAAM,SAASC,EAASC,GACpBN,EAASO,GAAGH,KAAKI,KAAKC,KAAMJ,EAASC,GACrCG,KAAKC,KAAKC,SAASC,SALV,wBAOLH,KAAKI,wBAAwBJ,KAAKH,SAClCG,KAAKC,KAAKC,SAASG,MAAML,KAAKM,wBAAwBN,KAAKH,UACpDG,KAAKH,QAAQU,eACpBP,KAAKC,KAAKC,SAASG,MAAML,KAAKH,QAAQU,gBAI9CV,QAAS,CACLhB,KAAM,sBACN2B,GAAI,4BACJC,QAAS,GACTF,cAAe,KACfG,aAAc,IAGlBC,WAAY,SAASd,GACjBN,EAASO,GAAGa,WAAWZ,KAAKC,KAAMH,GAC9BG,KAAKI,wBAAwBP,GAC7BG,KAAKC,KAAKC,SAASG,MAAML,KAAKM,wBAAwBT,IAC/CG,KAAKH,QAAQU,eACpBP,KAAKC,KAAKC,SAASG,MAAML,KAAKH,QAAQU,gBAI9CH,wBAAyB,SAASP,GAC9B,IAAIY,EAAUZ,EAAQY,QAEtB,IAAKA,IAAYA,EAAQG,OACrB,OAAO,EAGX,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQG,OAAQC,IAAK,CACrC,IAAIC,EAAeL,EAAQI,GAAGR,MAC9B,IAAKS,GAAgBC,MAAMC,SAASF,EAAc,MAAQtB,EAAqByB,KAAKH,GAChF,OAAO,EAIf,OAAO,GAGXR,wBAAyB,SAAST,GAI9B,IAHA,IAAIY,EAAUZ,EAAQY,QAClBS,EAAa9B,EAAM+B,QAAQC,YAEtBP,EAAI,EAAGA,EAAIJ,EAAQG,OAAQC,IAAK,CACrC,IAAIC,EAAeL,EAAQI,GAAGR,MAC9Ba,GAA0BF,SAASF,EAAc,IAGrD,OAAOI,GAGXG,SAAU,WACN9B,EAASO,GAAGuB,SAAStB,KAAKC,MAC1BA,KAAKsB,QAAQnB,SA/DJ,qBAmEjBb,EAAGiC,OAAO9B,GAEVL,EAAMoC,cAAcC,eAAe,sBAAuB,YAE1DrC,EAAMoC,cAAcE,eAAe,sBAAuB,CAAC,CACvDC,KAAM,UACNC,OAAQxC,EAAMoC,cAAcK,cAAcC,OAAO,CAAC,CAAC,OAAQ,aA9EnE,CAgFGzC,OAAOD,MAAM2C,QAChB,IAAIC,QAAU5C,aAEL4C","sourcesContent":["import './kendo.combobox.js';\n\nvar __meta__ = {\n    id: \"multicolumncombobox\",\n    name: \"MultiColumnComboBox\",\n    category: \"web\",\n    description: \"The MultiColumnComboBox widget allows the selection from pre-defined values or entering a new value where the list popup is rendered in table layout.\",\n    depends: [ \"combobox\" ],\n    features: [ {\n        id: \"mobile-scroller\",\n        name: \"Mobile scroller\",\n        description: \"Support for kinetic scrolling in mobile device\",\n        depends: [ \"mobile.scroller\" ]\n    }, {\n        id: \"virtualization\",\n        name: \"VirtualList\",\n        description: \"Support for virtualization\",\n        depends: [ \"virtuallist\" ]\n    } ]\n};\n\n(function($, undefined$1) {\n    var kendo = window.kendo,\n        ui = kendo.ui,\n        ComboBox = ui.ComboBox,\n        percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n        MCCOMBOBOX = \"k-dropdowngrid\",\n        POPUPCLASS = \"k-dropdowngrid-popup\";\n\n    var MultiColumnComboBox = ComboBox.extend({\n        init: function(element, options) {\n            ComboBox.fn.init.call(this, element, options);\n            this.list.parent().addClass(POPUPCLASS);\n\n            if (this._allColumnsWidthsAreSet(this.options)) {\n                this.list.parent().width(this._calculateDropDownWidth(this.options));\n            } else if (this.options.dropDownWidth) {\n                this.list.parent().width(this.options.dropDownWidth);\n            }\n        },\n\n        options: {\n            name: \"MultiColumnComboBox\",\n            ns: \".kendoMultiColumnComboBox\",\n            columns: [],\n            dropDownWidth: null,\n            filterFields: []\n        },\n\n        setOptions: function(options) {\n            ComboBox.fn.setOptions.call(this, options);\n            if (this._allColumnsWidthsAreSet(options)) {\n                this.list.parent().width(this._calculateDropDownWidth(options));\n            } else if (this.options.dropDownWidth) {\n                this.list.parent().width(this.options.dropDownWidth);\n            }\n        },\n\n        _allColumnsWidthsAreSet: function(options) {\n            var columns = options.columns;\n\n            if (!columns || !columns.length) {\n                return false;\n            }\n\n            for (var i = 0; i < columns.length; i++) {\n                var currentWidth = columns[i].width;\n                if (!currentWidth || isNaN(parseInt(currentWidth, 10)) || percentageUnitsRegex.test(currentWidth)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        _calculateDropDownWidth: function(options) {\n            var columns = options.columns;\n            var totalWidth = kendo.support.scrollbar();\n\n            for (var i = 0; i < columns.length; i++) {\n                var currentWidth = columns[i].width;\n                totalWidth = totalWidth + parseInt(currentWidth, 10);\n            }\n\n            return totalWidth;\n        },\n\n        _wrapper: function() {\n            ComboBox.fn._wrapper.call(this);\n            this.wrapper.addClass(MCCOMBOBOX);\n        }\n    });\n\n    ui.plugin(MultiColumnComboBox);\n\n    kendo.cssProperties.registerPrefix(\"MultiColumnComboBox\", \"k-input-\");\n\n    kendo.cssProperties.registerValues(\"MultiColumnComboBox\", [{\n        prop: \"rounded\",\n        values: kendo.cssProperties.roundedValues.concat([['full', 'full']])\n    }]);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}